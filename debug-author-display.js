import { createClient } from '@sanity/client';

const client = createClient({
  projectId: 'aoxze287',
  dataset: 'production',
  apiVersion: '2024-01-01',
  useCdn: false,
  token: process.env.SANITY_API_TOKEN
});

async function debugAuthorDisplay() {
  try {
    console.log('üîç AuthorË°®Á§∫„Éá„Éê„ÉÉ„Ç∞...');
    
    // „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Åß‰ΩøÁî®„Åô„Çã„ÇØ„Ç®„É™„Çí„ÉÜ„Çπ„Éà
    const posts = await client.fetch(`
      *[_type == "post"] | order(publishedAt desc) [0...5] {
        _id,
        title,
        slug,
        description,
        tags,
        category,
        publishedAt,
        youtubeUrl,
        author->{
          _id,
          name,
          slug,
          bio,
          image{
            asset->{
              _ref,
              url
            }
          }
        },
        "excerpt": description,
        "categories": [category]
      }
    `);
    
    console.log(`üìä ÂèñÂæóË®ò‰∫ãÊï∞: ${posts.length}‰ª∂\n`);
    
    posts.forEach((post, i) => {
      console.log(`${i + 1}. ${post.title.substring(0, 50)}...`);
      console.log(`   Author ID: ${post.author?._id || 'Êú™Ë®≠ÂÆö'}`);
      console.log(`   AuthorÂêç: ${post.author?.name || 'Êú™Ë®≠ÂÆö'}`);
      console.log(`   AuthorÁîªÂÉè: ${post.author?.image?.asset?.url || 'Êú™Ë®≠ÂÆö'}`);
      console.log(`   Author Bio: ${post.author?.bio?.substring(0, 50) || 'Êú™Ë®≠ÂÆö'}...`);
      console.log('');
    });
    
    // AuthorÊÉÖÂ†±„ÇíÁõ¥Êé•Á¢∫Ë™ç
    const author = await client.fetch(`
      *[_type == "author" && name == "„Åï„Åï„Çà„Åó"] {
        _id,
        name,
        slug,
        bio,
        image
      }[0]
    `);
    
    console.log('üë§ SanityÂÜÖ„ÅÆAuthorÊÉÖÂ†±:');
    console.log(`   ID: ${author._id}`);
    console.log(`   ÂêçÂâç: ${author.name}`);
    console.log(`   Slug: ${author.slug?.current}`);
    console.log(`   Bio: ${author.bio}`);
    console.log(`   ÁîªÂÉè: ${author.image ? '„ÅÇ„Çä' : '„Å™„Åó'}`);
    
    // AuthorÂèÇÁÖß„ÅÆÁ¢∫Ë™ç
    const postsWithAuthorRef = await client.fetch(`
      *[_type == "post" && defined(author)] {
        _id,
        title,
        "authorRef": author._ref
      }
    `);
    
    console.log(`\nüìä AuthorÂèÇÁÖßË®≠ÂÆöÊ∏à„ÅøË®ò‰∫ã: ${postsWithAuthorRef.length}‰ª∂`);
    
    const correctAuthorRefs = postsWithAuthorRef.filter(p => p.authorRef === author._id);
    console.log(`‚úÖ Ê≠£„Åó„ÅÑAuthorÂèÇÁÖß: ${correctAuthorRefs.length}‰ª∂`);
    
    if (postsWithAuthorRef.length !== correctAuthorRefs.length) {
      console.log('‚ùå ‰∏çÊ≠£„Å™AuthorÂèÇÁÖß„ÅåÂ≠òÂú®„Åó„Åæ„Åô');
    }
    
    return {
      postsWithAuthor: posts.filter(p => p.author).length,
      authorExists: !!author,
      authorRefsCorrect: correctAuthorRefs.length,
      totalPostsWithRef: postsWithAuthorRef.length
    };
    
  } catch (error) {
    console.error('‚ùå „Éá„Éê„ÉÉ„Ç∞„Ç®„É©„Éº:', error.message);
    return null;
  }
}

debugAuthorDisplay();