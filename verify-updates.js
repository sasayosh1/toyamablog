import { createClient } from '@sanity/client';

const client = createClient({
  projectId: 'aoxze287',
  dataset: 'production',
  apiVersion: '2024-01-01',
  useCdn: false,
  token: process.env.SANITY_API_TOKEN
});

async function verifyUpdates() {
  try {
    console.log('üîç Êõ¥Êñ∞ÁµêÊûú„ÅÆÁ¢∫Ë™ç...');
    
    // ÂÖ®„Å¶„ÅÆÊúÄÊñ∞Ë®ò‰∫ã„ÇíÁ¢∫Ë™ç
    const allRecentPosts = await client.fetch(`
      *[_type == "post" && publishedAt >= "2025-06-28T00:00:00"] | order(publishedAt desc) {
        _id,
        title,
        slug,
        youtubeUrl,
        publishedAt,
        category,
        tags
      }
    `);
    
    console.log(`üìä 6Êúà28Êó•‰ª•Èôç„ÅÆË®ò‰∫ã: ${allRecentPosts.length}‰ª∂\n`);
    
    allRecentPosts.forEach((post, i) => {
      console.log(`${i + 1}. ${post.title}`);
      console.log(`   ID: ${post._id}`);
      console.log(`   Slug: ${post.slug?.current}`);
      console.log(`   YouTube: ${post.youtubeUrl || 'Êú™Ë®≠ÂÆö'}`);
      console.log(`   „Ç´„ÉÜ„Ç¥„É™: ${post.category}`);
      console.log(`   „Çø„Ç∞Êï∞: ${post.tags?.length || 0}ÂÄã`);
      console.log(`   Êó•ÊôÇ: ${post.publishedAt}`);
      console.log('');
    });
    
    // YouTube URLË®≠ÂÆöÁä∂Ê≥Å
    const withYoutube = allRecentPosts.filter(p => p.youtubeUrl);
    const withoutYoutube = allRecentPosts.filter(p => !p.youtubeUrl);
    
    console.log('üìà YouTube URLË®≠ÂÆöÁä∂Ê≥Å:');
    console.log(`‚úÖ Ë®≠ÂÆöÊ∏à„Åø: ${withYoutube.length}‰ª∂`);
    console.log(`‚ùå Êú™Ë®≠ÂÆö: ${withoutYoutube.length}‰ª∂`);
    
    if (withYoutube.length > 0) {
      console.log('\nüé¨ YouTube URLË®≠ÂÆöÊ∏à„ÅøË®ò‰∫ã:');
      withYoutube.forEach((post, i) => {
        console.log(`${i + 1}. ${post.title.substring(0, 50)}...`);
        console.log(`   URL: ${post.youtubeUrl}`);
      });
    }
    
    if (withoutYoutube.length > 0) {
      console.log('\n‚ùì YouTube URLÊú™Ë®≠ÂÆöË®ò‰∫ã:');
      withoutYoutube.forEach((post, i) => {
        console.log(`${i + 1}. ${post.title.substring(0, 50)}...`);
      });
    }
    
    return {
      total: allRecentPosts.length,
      withYoutube: withYoutube.length,
      withoutYoutube: withoutYoutube.length
    };
    
  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error.message);
    return null;
  }
}

verifyUpdates();