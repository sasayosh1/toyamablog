const { createClient } = require('@sanity/client');

const client = createClient({
  projectId: 'aoxze287',
  dataset: 'production',
  apiVersion: '2024-01-01',
  useCdn: false,
  token: process.env.SANITY_API_TOKEN
});

const targetTitles = [
  '„ÄêÂçóÁ†∫Â∏Ç„Äë„ÅÜ„Åï„ÅéÊé®„ÅóÂøÖË¶ãÔºÅ„Äå„Éë„ÉÜ„Ç£„Çπ„É™„Éº„Åæ„Å°„Å™„Åø„É©„Éë„É≥„Äç„ÅåÂèØÊÑõ„Åô„Åé„ÅüÔºÅ #shorts',
  '„ÄêÂØåÂ±±Â∏Ç„ÄëËêΩ„Å°ÁùÄ„ÅÑ„ÅüÁ©∫Èñì„ÅßÊ•Ω„Åó„ÇÄ„É™„Éà„É´‰∏äÊµ∑„ÅÆÊú¨Ê†º‰∏≠ËèØ„É©„É≥„ÉÅÔºÅÊó•Â∏∏„Å´„Åù„Å£„Å®È´òÁ¥öÊÑü„Çí #shorts',
  '„ÄêÈ´òÂ≤°Â∏Ç„ÄëËÑ±Âá∫„Çí‰ºÅ(„Åè„Çè„Å†)„Å¶„Çã„Éö„É≥„ÇÆ„É≥',
  '„ÄêÈ≠öÊ¥•Â∏Ç„ÄëÊØéÊó•Êöë„ÅÑ„ÅÆ„Åß„Ç¥„Éû„Éï„Ç¢„Ç∂„É©„Ç∑„ÇíË¶ã„Å¶Ê∂º„Åó„Åï„ÇíÊÑü„Åò„Çà„ÅÜÔºÅÈ≠öÊ¥•Ê∞¥ÊóèÈ§®„ÅÆÁôí„Åó‰ΩìÈ®ì',
  '„ÄêÊ∞∑Ë¶ãÂ∏Ç„ÄëÂêâ„Åå„ÅëÁâßÂ†¥„ÅÆ„É§„ÇÆ„Åü„Å°„Åã„ÇâË¶ãÁøí„ÅÑ„Åü„ÅÑ„Çπ„É≠„Éº„É©„Ç§„Éï‰ΩìÈ®ì',
  '„ÄêÁ†∫Ê≥¢Â∏Ç„Äë„Ç§„Ç™„É≥„É¢„Éº„É´„Å®„Å™„Åø„Åß„ÄéÂäáÂ†¥Áâà„ÄåÈ¨ºÊªÖ„ÅÆÂàÉ„ÄçÁÑ°ÈôêÂüéÁ∑®„Äè„Éù„Çπ„Çø„ÉºÂ±ïÈñãÂÇ¨‰∏≠ÔºÅ',
  '„ÄêÈ´òÂ≤°Â∏Ç„Äë„Éâ„É™„Ç¢Â∞ÇÈñÄÂ∫ó„Äå„Éâ„É™„Ç¢„É™„Éº„Éú„Äç„ÅßË°åÂàóÂøÖËá≥„ÅÆÊøÉÂéö„Éâ„É™„Ç¢„É©„É≥„ÉÅÔºÅ#shorts',
  '„ÄêÂØåÂ±±Â∏Ç„ÄëÂØåÂ±±„ÅÆÂ≠¶ÂïèÁ•ûÁ§æÔºÅÊñº‰øùÂ§ö(„Åä„Åä„Åü)Á•ûÁ§æ„ÅßÂ§èË©£ÔºÜÂ≠¶Ê•≠Á•àÈ°ò',
  '„ÄêÂØåÂ±±Â∏Ç„ÄëÊ∂ºÊÑüMAXÔºÅÁí∞Ê∞¥ÂÖ¨Âúí„Çµ„Éû„Éº„Éï„Ç°„Ç¶„É≥„ÉÜ„É≥2025„ÅßÂ§è„ÅÆÊöë„Åï„ÇíÂêπ„ÅçÈ£õ„Å∞„Åù„ÅÜ',
  '„ÄêÂØåÂ±±Â∏Ç„ÄëÊù±‰∫¨„Éá„Ç£„Ç∫„Éã„Éº„É™„Çæ„Éº„Éà40Âë®Âπ¥„Çπ„Éö„Ç∑„É£„É´„Éë„É¨„Éº„ÉâÂÆåÂÖ®ÁâàÔΩúÂØåÂ±±„Åæ„Å§„Çä2023'
];

async function findTargetArticles() {
  try {
    console.log('üîç ÊåáÂÆö„Åï„Çå„Åü10‰ª∂„ÅÆË®ò‰∫ã„ÇíÊ§úÁ¥¢‰∏≠...\n');
    
    const posts = await client.fetch(`*[_type == "post"] {
      _id,
      title,
      slug,
      description,
      body,
      publishedAt
    }`);

    const foundArticles = [];
    const notFoundTitles = [];

    targetTitles.forEach((targetTitle, index) => {
      const found = posts.find(post => post.title === targetTitle);
      if (found) {
        const bodyText = found.body ? found.body
          .filter(block => block._type === 'block')
          .map(block => block.children && block.children.map(child => child.text).join(''))
          .join(' ') : '';
        
        foundArticles.push({
          index: index + 1,
          id: found._id,
          title: found.title,
          slug: found.slug?.current,
          description: found.description,
          bodyLength: bodyText.length,
          bodyPreview: bodyText.substring(0, 200) + '...'
        });
      } else {
        notFoundTitles.push({
          index: index + 1,
          title: targetTitle
        });
      }
    });

    console.log(`‚úÖ Ë¶ã„Å§„Åã„Å£„ÅüË®ò‰∫ã: ${foundArticles.length}‰ª∂`);
    console.log(`‚ùå Ë¶ã„Å§„Åã„Çâ„Å™„Åã„Å£„ÅüË®ò‰∫ã: ${notFoundTitles.length}‰ª∂\n`);

    if (foundArticles.length > 0) {
      console.log('üìù Ë¶ã„Å§„Åã„Å£„ÅüË®ò‰∫ã„ÅÆË©≥Á¥∞:\n');
      foundArticles.forEach(article => {
        console.log(`${article.index}. ${article.title}`);
        console.log(`   ID: ${article.id}`);
        console.log(`   „Çπ„É©„ÉÉ„Ç∞: ${article.slug}`);
        console.log(`   ÁèæÂú®„ÅÆË™¨ÊòéÊñá: ${article.description || 'Êú™Ë®≠ÂÆö'}`);
        console.log(`   ÊñáÂ≠óÊï∞: ${article.bodyLength}ÊñáÂ≠ó`);
        console.log(`   ÂÜÖÂÆπ„Éó„É¨„Éì„É•„Éº: ${article.bodyPreview}`);
        console.log('   ---\n');
      });
    }

    if (notFoundTitles.length > 0) {
      console.log('‚ùå Ë¶ã„Å§„Åã„Çâ„Å™„Åã„Å£„ÅüË®ò‰∫ã:\n');
      notFoundTitles.forEach(item => {
        console.log(`${item.index}. ${item.title}`);
      });
    }

    return foundArticles;

  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error.message);
    return [];
  }
}

findTargetArticles();