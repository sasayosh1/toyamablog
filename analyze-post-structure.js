import { createClient } from '@sanity/client';

const client = createClient({
  projectId: 'aoxze287',
  dataset: 'production',
  apiVersion: '2024-01-01',
  useCdn: false
});

async function analyzePostStructure() {
  try {
    console.log('üîç Êó¢Â≠òË®ò‰∫ã„ÅÆÊßãÈÄ†„ÇíÂàÜÊûê‰∏≠...');
    
    // „Çµ„É≥„Éó„É´Ë®ò‰∫ã„ÇíË©≥Á¥∞„Å´Ë™øÊüª
    const samplePosts = await client.fetch(`*[_type == "post"] | order(_updatedAt desc) [0...3] {
      _id,
      _type,
      title,
      slug,
      content,
      body,
      text,
      description,
      tags,
      category,
      publishedAt,
      _createdAt,
      _updatedAt,
      ...
    }`);
    
    console.log(`üìä „Çµ„É≥„Éó„É´Ë®ò‰∫ãÊï∞: ${samplePosts.length}`);
    
    samplePosts.forEach((post, index) => {
      console.log(`\n--- Ë®ò‰∫ã ${index + 1} ---`);
      console.log(`„Çø„Ç§„Éà„É´: ${post.title}`);
      console.log(`ID: ${post._id}`);
      
      // „Éï„Ç£„Éº„É´„Éâ‰∏ÄË¶ß
      const fields = Object.keys(post).filter(key => !key.startsWith('_'));
      console.log(`„Éï„Ç£„Éº„É´„Éâ: ${fields.join(', ')}`);
      
      // „Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆÊßãÈÄ†„ÇíÁ¢∫Ë™ç
      if (post.content) {
        console.log(`content: ${typeof post.content} (Èï∑„Åï: ${Array.isArray(post.content) ? post.content.length : 'N/A'})`);
        if (Array.isArray(post.content) && post.content.length > 0) {
          console.log(`ÊúÄÂàù„ÅÆ„Éñ„É≠„ÉÉ„ÇØ: ${post.content[0]._type || 'unknown'}`);
        }
      }
      
      if (post.body) {
        console.log(`body: ${typeof post.body} (Èï∑„Åï: ${Array.isArray(post.body) ? post.body.length : 'N/A'})`);
        if (Array.isArray(post.body) && post.body.length > 0) {
          console.log(`ÊúÄÂàù„ÅÆ„Éñ„É≠„ÉÉ„ÇØ: ${post.body[0]._type || 'unknown'}`);
        }
      }
      
      // „Çπ„É©„ÉÉ„Ç∞ÊÉÖÂ†±
      if (post.slug) {
        console.log(`„Çπ„É©„ÉÉ„Ç∞: ${post.slug.current || post.slug}`);
      }
    });
    
    // ÁèæÂú®„ÅÆ„Çπ„Ç≠„Éº„ÉûÊßãÈÄ†„ÇíÁ¢∫Ë™ç
    console.log('\nüèóÔ∏è ÁèæÂú®„ÅÆpost„Çπ„Ç≠„Éº„Éû„Å´Âê´„Åæ„Çå„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çã„Éï„Ç£„Éº„É´„Éâ:');
    const allFields = new Set();
    
    const allPosts = await client.fetch(`*[_type == "post"] [0...10] {
      ...
    }`);
    
    allPosts.forEach(post => {
      Object.keys(post).forEach(key => {
        if (!key.startsWith('_')) {
          allFields.add(key);
        }
      });
    });
    
    console.log([...allFields].sort().join(', '));
    
  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error.message);
  }
}

analyzePostStructure();