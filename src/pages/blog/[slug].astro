---
import { getCollection } from 'astro:content';
import { getAllBlogPosts, getBlogPostBySlug } from '../../lib/sanity';
import PostLayout from '../../layouts/PostLayout.astro';
import PortableText from '../../components/PortableText.astro';

export async function getStaticPaths() {
  // Astroのコンテンツコレクションから取得
  const blogEntries = await getCollection('blog');
  const astroPaths = blogEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry, source: 'astro' },
  }));

  // Sanityからブログ記事を取得（既存のpostタイプも含む）
  try {
    const sanityPosts = await getAllBlogPosts();
    const sanityPaths = sanityPosts.map(post => ({
      params: { slug: post.slug.current },
      props: { post, source: 'sanity' },
    }));
    
    // 既存のpostタイプも取得
    const { getAllPosts } = await import('../../lib/sanity');
    const existingPosts = await getAllPosts();
    const existingPaths = existingPosts.map(post => ({
      params: { slug: post.slug?.current || '' },
      props: { post, source: 'existing-post' },
    })).filter(path => path.params.slug); // スラッグがあるもののみ
    
    return [...astroPaths, ...sanityPaths, ...existingPaths];
  } catch (error) {
    console.warn('Sanity posts could not be loaded:', error);
    return astroPaths;
  }
}

const { entry, post, source } = Astro.props;

let Content;
if (source === 'astro' && entry) {
  const rendered = await entry.render();
  Content = rendered.Content;
}
---

{source === 'astro' && entry ? (
  <PostLayout post={entry}>
    <Content />
  </PostLayout>
) : source === 'sanity' && post ? (
  <PostLayout post={post}>
    <PortableText content={post.content} />
  </PostLayout>
) : source === 'existing-post' && post ? (
  <PostLayout post={post}>
    <PortableText content={post.body || []} />
  </PostLayout>
) : (
  <div>記事が見つかりません</div>
)}